/**
 * OK. Skupmy siÄ™ na tym, JAK powinniÅ›my pisaÄ‡ nasze testy.
 * lepsze podejÅ›cie niÅ¼ 102-sample-logic. ðŸ˜Š.
 *
 * Co jest waÅ¼ne?
 *
 * CÃ³Å¼, NAZWA testu â€” musi wyraÅ¼aÄ‡ to, co chciaÅ‚eÅ› przetestowaÄ‡.
 * SprÃ³buj odpowiedzieÄ‡, co testujesz, a czasem nawet â€“ dlaczego to robisz.
 *
 * STRUKTURA testu powinna wyglÄ…daÄ‡ nastÄ™pujÄ…co: 3x A = Arrange, Act, Assert
 * Nie musisz dawaÄ‡ komentarzy jak poniÅ¼ej (ktÃ³ra czÄ™Å›Ä‡ jest ktÃ³rÄ…) - tutaj sÅ‚uÅ¼y to tylko pokazaniu, jak to ma wyglÄ…daÄ‡.
 * PowinniÅ›my jednak trzymaÄ‡ siÄ™ tego stylu struktury (Given/When/Then) wszÄ™dzie tam, gdzie to moÅ¼liwe.
 *
 * Daje to czytelnoÅ›Ä‡ i skupienie na poszczegÃ³lnych czÄ™Å›ciach testu.
 *
 * ASSERT â€“ staraj siÄ™ tworzyÄ‡ jak najmniej asercji na test.
 * Czasami lepiej jest podzieliÄ‡ to, co testujesz, na 2 przypadki testowe, zamiast robiÄ‡ to w jednym, z wieloma asercjami.
 * OmÃ³wimy to szerzej w nastÄ™pnych przykÅ‚adach, ale miej to na uwadze.
 * Lepiej jest rÃ³wnieÅ¼ uÅ¼ywaÄ‡ asercji .toEqual() / .toBe() [not.toEqual() / not.toBe()]
 * tak dÅ‚ugo, jak to moÅ¼liwe â€” aby po prostu zachowaÄ‡ prostotÄ™!
 *
 *
 * ZauwaÅ¼, Å¼e nie stosujemy tutaj funkcji "test()" tylko "it()"
 * Jest to celowy zabieg.
 * https://jestjs.io/docs/api#testname-fn-timeout (zobacz: "Also under the alias: it(name, fn, timeout)")
 *
 * it jest aliasem dla "test".
 * DziÄ™ki temu mamy uÅ‚atwienie opisywania przypadkÃ³w testowych jako:
 * it should...
 *
 * I dostajemy moÅ¼liwoÅ›Ä‡ skÅ‚adnego opisywania przypadkÃ³w testowych w formie:
 *
 * it should do this and that...
 * it should behave like that
 * it should .... etc.
 * */

it('should result 30 when 10 added to 20', () => {
  // Arrange / Given
  const numberA = 10;
  const numberB = 20;

  // Act / When
  const result = numberA + numberB;

  // Assert / Then
  expect(result).toBe(30);
});
